CSCI 104
Problem #4
Recursion

To find the end contents of mat, you have to follow the recursive calls in the problem. 
Starting with the call func1(mat, 3, 4) from main leads to the pattern of checking whether n is > 0, 
from the parameters int func1(int** mat, int n , int m), and preceding to recursively call func1 again 
with new parameters until n is 0. Therefore, starting from func1(mat, 3, 4) we get func1(mat, 2, 4), 
func1(mat, 1, 4), and finally func1(mat, 0, 4). Once n = 0, you return mat[0][0], which is the first 
element of the r1. mat[0][0] = 1, which means that 1 is returned back up to the most recent recursive 
call of func1, which happens to be func1(mat, 1, 4). You have to remember that func1(mat, n-1, m) is 
actually assigned to mat[n-1][0]. This means that the value of 1 that we returned is placed into mat[0][0]. 
Once we reassign the value of mat[0][0], we continue down the if statement with return func2(mat[n-1], m). 
In this case, you would call func2(mat[0], 4). Func2(int* in, int x) is just a function that adds up all 
the elements within one of the three arrays in mat. So calling func2(mat[0], 4) will end up with temp = 10. 
Temp is then returned to the next recursive call that was made, which is func1(mat, 2, 4). Now mat[1][0] = 10, 
and the contents of r2 change to r2 = {10, 6, 7, 8}. Func2 gets called again with the parameters func2(mat[1], 4) 
and temp ends up being 31. So 31 gets returned back to the next recursive call which is func1(mat, 3, 4). 
Now mat[2][0] = 31 and r2 = {31, 10, 11, 12}.  

Therefore the end contents of mat are mat = {r1, r2, r3} with
r1 = {1, 2, 3, 4}
r2 = {10, 6, 7, 8}
r3 = {31, 10, 11, 12}

What gets printed from the main function is:
1    2    3   4
10  6    7   8
31  10  11  12
